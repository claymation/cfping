#!/usr/bin/env python -u

"""
cloudfiles-ping: Test the performance and availability of the Rackspace cloudfiles or Openstack swift service.
"""

import argparse
import contextlib
import os
import time
import uuid
import sys

import cloudfiles


DEFAULT_PING_INTERVAL = 1
DEFAULT_PING_REPETITIONS = None
TEST_DATA = 'The quick brown fox jumps over the lazy dog.'


def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB','TB','PB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0


@contextlib.contextmanager
def timer():
    """
    Time an operation.
    """
    start_time = time.time()
    yield
    end_time = time.time()

    elapsed_time = end_time - start_time

    print '%10.3f' % (elapsed_time),

    
def ping(auth_url, username, key, container=None, use_service_net=False):
    """
    Ping the Rackspace cloudfiles or Openstack swift service, printing the elapsed time for a connection, a write, and a read.
    """

    try:
        with timer():

            with timer():
                conn = cloudfiles.get_connection(username, 
                                                 key, 
                                                 servicenet=use_service_net, 
                                                 authurl=auth_url)

            with timer():
                if container is None:
                    # Get first container
                    container = conn.get_all_containers()[0]
                else:
                    container = conn.get_container(container)

            obj_name = str(uuid.uuid4())

            with timer():
                obj = container.create_object(obj_name)

            with timer():
                obj.write(TEST_DATA)

            with timer():
                result = obj.read()
            
            with timer():
                container.delete_object(obj_name)

        if result != TEST_DATA:
            print '%10s' % ('NOMATCH'),

    except KeyboardInterrupt:
        raise
    except Exception as e:
        print '%10s (Exception: %s)' % ('*', e),

    print


def ping_forever(authurl, username, key,
                 container=None, use_service_net=False,
                 ping_interval=DEFAULT_PING_INTERVAL,
                 repetitions=DEFAULT_PING_REPETITIONS):
    """
    Continually ping the Rackspace cloudfiles or Openstack swift service, sleeping for `ping_interval` seconds between requests.
    """
    print 'Pinging storage (sending request every %d seconds with %s):' % (ping_interval, sizeof_fmt(sys.getsizeof(TEST_DATA)))
    print '%10s %10s %10s %10s %10s %10s %10s %10s' % ('seq. #', 
                                                       'connect', 
                                                       'container', 
                                                       'create', 
                                                       'write', 
                                                       'read', 
                                                       'delete', 
                                                       'total')
    try:
        request_count = 1
        while True:
            print '%10d' % (request_count),

            ping(authurl, username, key, container=container, use_service_net=use_service_net)
            time.sleep(ping_interval)

            request_count += 1
            if repetitions is not None and request_count > repetitions:
                break

    except KeyboardInterrupt:
        print
        print '%d requests' % request_count


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Test the performance and availability of the Rackspace cloudfiles or Openstack swift service.')

    parser.add_argument('-u', '--username', help='Storage service username (default: CFUSER)')
    parser.add_argument('-k', '--key', help='Storage service key (default: CFKEY)')
    parser.add_argument('-a', '--authurl', help='Storage service auth URL '
                                                '(default: %s)' % cloudfiles.us_authurl)
    parser.add_argument('-c', '--container',
                       help='Use the specified container (default: use the first container [index 0])')
    parser.add_argument('-s', '--service-net', dest="use_service_net", action='store_true',
                       help='Use the Rackspace service network (default: use public network)')
    parser.add_argument('-i', '--interval', dest='ping_interval', type=int, default=DEFAULT_PING_INTERVAL,
                       help='Seconds to wait between ping requests (default: %d seconds)' % DEFAULT_PING_INTERVAL)
    parser.add_argument('-r', '--repetitions', dest='ping_repetitions', type=int, default=DEFAULT_PING_REPETITIONS,
                       help='Number of repetitions (default: infinite)')
    parser.add_argument('-t', '--test-data-size', dest='test_data_size', type=int, default=sys.getsizeof(TEST_DATA),
                       help='Test data size in Bytes (default: %d Bytes)' % sys.getsizeof(TEST_DATA))

    args = parser.parse_args()

    username = args.username or os.getenv('CFUSER')
    if not username:
        parser.error("username not provided and not found in CFUSER environment variable")

    key = args.key or os.getenv('CFKEY')
    if not key:
        parser.error("key not provided and not found in CFKEY environment variable")

    authurl = args.authurl or os.getenv('CFAUTHURL')
    if not authurl:
        authurl = cloudfiles.us_authurl

    if args.test_data_size != sys.getsizeof(TEST_DATA):
        TEST_DATA = str(os.urandom(args.test_data_size - sys.getsizeof('')))

    ping_forever(authurl, username, key,
                 container=args.container,
                 use_service_net=args.use_service_net,
                 ping_interval=args.ping_interval,
                 repetitions=args.ping_repetitions)
