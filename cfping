#!/usr/bin/env python -u

"""
cloudfiles-ping: Test the performance and availability of the Rackspace 
cloudfiles or Openstack swift service.
"""

import argparse
import contextlib
import os
import time
import uuid
import sys

import cloudfiles


DEFAULT_PING_INTERVAL = 1
DEFAULT_PING_REPETITIONS = None
TEST_DATA = 'The quick brown fox jumps over the lazy dog.'
connect_times=[]
container_times=[]
create_times=[]
write_times=[]
read_times=[]
delete_times=[]
total_times=[]


def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB','TB','PB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0


@contextlib.contextmanager
def timer(time_list=[], stats=False):
    """
    Time an operation.
    """
    start_time = time.time()
    yield
    end_time = time.time()

    elapsed_time = end_time - start_time

    print '%10.3f' % (elapsed_time),
    if stats:
        time_list.append(elapsed_time)

    
def ping(auth_url, username, key, container=None, use_service_net=False, 
         stats=False):
    """
    Ping the Rackspace cloudfiles or Openstack swift service, printing the 
    elapsed time for a connection, a write, and a read.
    """

    try:
        with timer(total_times, stats):

            with timer(connect_times, stats):
                conn = cloudfiles.get_connection(username, 
                                                 key, 
                                                 servicenet=use_service_net, 
                                                 authurl=auth_url)

            with timer(container_times, stats):
                if container is None:
                    # Get first container
                    container = conn.get_all_containers()[0]
                else:
                    container = conn.get_container(container)

            obj_name = str(uuid.uuid4())

            with timer(create_times, stats):
                obj = container.create_object(obj_name)

            with timer(write_times, stats):
                obj.write(TEST_DATA)

            with timer(read_times, stats):
                result = obj.read()
            
            with timer(delete_times, stats):
                container.delete_object(obj_name)

        if result != TEST_DATA:
            print '%10s' % ('NOMATCH'),

    except KeyboardInterrupt:
        raise
    except Exception as e:
        print '%10s (Exception: %s)' % ('*', e),

    print


def ping_forever(authurl, username, key, container=None, use_service_net=False, 
                 ping_interval=DEFAULT_PING_INTERVAL,
                 repetitions=DEFAULT_PING_REPETITIONS,
                 machine_readable=False, stats=False):
    """
    Continually ping the Rackspace cloudfiles or Openstack swift service, 
    sleeping for `ping_interval` seconds between requests.
    """
    if not machine_readable:
        print 'Pinging storage (sending request every %2.2f seconds with %s):' % (
               ping_interval, sizeof_fmt(sys.getsizeof(TEST_DATA)))
        print '%10s %10s %10s %10s %10s %10s %10s %10s' % ('seq. #', 
                                                           'connect', 
                                                           'container', 
                                                           'create', 
                                                           'write', 
                                                           'read', 
                                                           'delete', 
                                                           'total')
    
    try:
        request_count = 1
        while True:
            print '%10d' % (request_count), 
            ping(authurl, username, key, container=container, 
                 use_service_net=use_service_net,
                 stats=stats)
            request_count += 1
            if repetitions is not None and request_count > repetitions:
                break
            if not machine_readable and not request_count % 25:
                print '%10s %10s %10s %10s %10s %10s %10s %10s' % ('seq. #', 
                                                                   'connect', 
                                                                   'container', 
                                                                   'create', 
                                                                   'write', 
                                                                   'read', 
                                                                   'delete', 
                                                                   'total')
            time.sleep(ping_interval)

    except KeyboardInterrupt:
        print

    if stats:
        if not machine_readable:
            print ''
        print '%10s %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f' % (
              'min',
              min(connect_times),
              min(container_times),
              min(create_times),
              min(write_times),
              min(read_times),
              min(delete_times),
              min(total_times))
        print '%10s %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f' % (
              'max',
              max(connect_times),
              max(container_times),
              max(create_times),
              max(write_times),
              max(read_times),
              max(delete_times),
              max(total_times))
        print '%10s %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f %10.3f' % (
              'avg',
              sum(connect_times) / float(len(connect_times)),
              sum(container_times) / float(len(container_times)),
              sum(create_times) / float(len(create_times)),
              sum(write_times) / float(len(write_times)),
              sum(read_times) / float(len(read_times)),
              sum(delete_times) / float(len(delete_times)),
              sum(total_times) / float(len(total_times)))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Test the performance and availability of the Rackspace cloudfiles or Openstack swift service.')

    parser.add_argument('-u', '--username', 
                        help='Storage service username (default: CFUSER)')
    parser.add_argument('-k', '--key', 
                        help='Storage service API key (default: CFKEY)')
    parser.add_argument('-a', '--authurl', 
                        help='Storage service auth URL '
                             '(default: %s)' % cloudfiles.us_authurl)
    parser.add_argument('-c', '--container',
                        help='Use the specified container (default: use the first container [index 0])')
    parser.add_argument('-s', '--service-net', 
                        dest="use_service_net", 
                        action='store_true',
                        help='Use the Rackspace service network (default: use public network)')
    parser.add_argument('-i', '--interval', dest='ping_interval', 
                        type=float, default=DEFAULT_PING_INTERVAL,
                        help='Seconds to wait between ping requests (default: %d seconds)' % DEFAULT_PING_INTERVAL)
    parser.add_argument('-r', '--repetitions', dest='ping_repetitions', type=int, 
                        default=DEFAULT_PING_REPETITIONS,
                        help='Number of repetitions (default: infinite)')
    parser.add_argument('-t', '--test-data-size', dest='test_data_size', type=int, 
                        default=len(TEST_DATA),
                        help='Test data size in Bytes (default: %d Bytes)' % sys.getsizeof(TEST_DATA))
    parser.add_argument('-m', '--machinereadable',  
                        help='Output results with no headers',
                        action='store_true')
    parser.add_argument('-d', '--data',  
                        help='Output statistics for the tests, min, max, and average (mean)',
                        action='store_true')
    args = parser.parse_args()

    username = args.username or os.getenv('CFUSER')
    if not username:
        parser.error("username not provided and not found in CFUSER environment variable")

    key = args.key or os.getenv('CFKEY')
    if not key:
        parser.error("key not provided and not found in CFKEY environment variable")

    authurl = args.authurl or os.getenv('CFAUTHURL')
    if not authurl:
        authurl = cloudfiles.us_authurl

    if args.test_data_size != sys.getsizeof(TEST_DATA):
        TEST_DATA = str(os.urandom(args.test_data_size - sys.getsizeof('')))

    ping_forever(authurl,username, key, container=args.container,
                 use_service_net=args.use_service_net,
                 ping_interval=args.ping_interval,
                 repetitions=args.ping_repetitions,
                 machine_readable=args.machinereadable, stats=args.data)
